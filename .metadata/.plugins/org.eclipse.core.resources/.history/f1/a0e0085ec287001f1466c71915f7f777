package Validators_Annotation;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.persistence.Entity;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Email;
import javax.validation.constraints.Future;
import javax.validation.constraints.FutureOrPresent;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NegativeOrZero;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.PastOrPresent;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Positive;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.CreditCardNumber;
import org.hibernate.validator.constraints.Range;
import org.hibernate.validator.constraints.URL;

@Entity
public class Validators_Annotation {

	// A field annotated with this should not be null
	// and we can customize the error msg also
	@NotNull(message = "id should not be null")
	int id;

//	A field annotated with this should not be empty
//	we can customize the message 
	@NotEmpty(message = "name should not be empty")
	String name;

//	This field should not be null and not empty and not blank
//	we can customize the message 
	@NotBlank(message = "surname should be blank")
	String surname;

//	Given Minimum value has to be satisfied
	@Min(message = "minimun marks should be greater then 1", value = 1)
	int minmarks;

//	Given Maximum value has to be satisfied
	@Max(value = 100, message = "marks shopuld be less then 100")
	int max_marks;

//	Field size should be less than or greater than the specified field size
	@Size(min = 2, max = 30, message = "Username must be between 2 and 30 characters")
	private String username;
	@Size(min = 1, max = 5, message = "Tags must contain between 1 and 5 items")
	private List<String> tags;

//	Email can be validated with this
	@Email(message = "Please provide a valid email address")
	private String email;

		
//	Validates that the field value consists only of digits, with the specified number of integer and fractional digits allowed.
	@Digits(integer = 5, fraction = 2, message = "Price must be a valid number with up to 5 digits before the decimal and 2 digits after")
	private BigDecimal price;
	
		
//	The field value must be a positive number (greater than zero).
	 @Positive(message = "Price must be positive")
	    private double positive;
	 
//	 The field value must be either zero or a negative number.
	 @NegativeOrZero(message = "Balance must be negative or zero")
	    private double balance;

	 
	 // Future date (must be after today)
	    @Future(message = "Invalid date. It should be provided as a future date.")
	    private Date futureDate;

	    // Future or present date (must be today or later)
	    @FutureOrPresent(message = "Invalid date. It should be provided as a future or present date.")
	    private Date futureOrPresent;

	    // Past or present date (must be today or earlier)
	    @PastOrPresent(message = "Invalid date. It should be provided as a past or present date.")
	    private Date pastOrPresent;
	    
//	    The field value must be within the specified range (inclusive of both min and max values).
	    @Range(min = 18, max = 100, message = "Age must be between 18 and 100")
	    private int age;
	    
	    
//	    	Given RegEx Pattern has to be satisfied.
	    @Pattern(regexp = "^[A-Za-z0-9 ]{1,50}$", 
	             message = "Product name must be 1 to 50 characters long and can contain letters, numbers, and spaces")
	    private String productName;

	    @URL(message = "Invalid URL. Please provide a valid URL.")
	    private String urlExample;
	    
	    @CreditCardNumber(message = "Invalid credit card number. It should not contain invalid characters.")
	    private String creditCardExample;
	    
}
