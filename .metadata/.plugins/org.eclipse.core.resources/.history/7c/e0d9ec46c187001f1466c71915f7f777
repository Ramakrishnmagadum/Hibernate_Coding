package Validators_Annotation;

import java.math.BigDecimal;
import java.util.List;

import javax.persistence.Entity;
import javax.validation.constraints.Digits;
import javax.validation.constraints.Email;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@Entity
public class Validators_Annotation {

	// A field annotated with this should not be null
	// and we can customize the error msg also
	@NotNull(message = "id should not be null")
	int id;

//	A field annotated with this should not be empty
//	we can customize the message 
	@NotEmpty(message = "name should not be empty")
	String name;

//	This field should not be null and not empty and not blank
//	we can customize the message 
	@NotBlank(message = "surname should be blank")
	String surname;

//	Given Minimum value has to be satisfied
	@Min(message = "minimun marks should be greater then 1", value = 1)
	int minmarks;

//	Given Maximum value has to be satisfied
	@Max(value = 100, message = "marks shopuld be less then 100")
	int max_marks;

//	Field size should be less than or greater than the specified field size
	@Size(min = 2, max = 30, message = "Username must be between 2 and 30 characters")
	private String username;
	@Size(min = 1, max = 5, message = "Tags must contain between 1 and 5 items")
	private List<String> tags;

//	Email can be validated with this
	@Email(message = "Please provide a valid email address")
	private String email;

		
//	Validates that the field value consists only of digits, with the specified number of integer and fractional digits allowed.
	@Digits(integer = 5, fraction = 2, message = "Price must be a valid number with up to 5 digits before the decimal and 2 digits after")
	private BigDecimal price;
	
	

}
